
from tornado.ioloop import IOLoop


exposed_routes = [
    (r"/", k4routes.core.IndexHandler),
]


# ----------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------

# this works



app = tweb.Application(exposed_routes, debug=True)

http_server = tserver.HTTPServer(app)
http_server.bind(paramz.K4_DEFAULT_PORT)
http_server.start(1)

IOLoop.current().start()


# ----------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------


# seemingly same unless you want to change the 1.



app = tweb.Application(exposed_routes, debug=True)
app.listen(paramz.K4_DEFAULT_PORT)

IOLoop.current().start()



# ---------------- app.listen docstring:

Starts an HTTP server for this application on the given port.
This is a convenience alias for creating an .HTTPServer object and calling its listen method.
Keyword arguments not supported by HTTPServer.listen <.TCPServer.listen> are passed to the .HTTPServer constructor.
For advanced uses (e.g. multi-process mode), do not use this method; create an .HTTPServer and call
its .TCPServer.bind/.TCPServer.start methods directly.

Note that after calling this method you still need to call IOLoop.current().start() (or run within asyncio.run)
to start the server.

Returns the .HTTPServer object.







# ----------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------









