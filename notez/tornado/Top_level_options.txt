

# ----- NOTE on implementing OPTIONS at top level (ie K4BaseHandler)

# A well behaved OPTIONS implementation would tell the client, what methods are allowed on this resource if any.
# Tornado base request handler already has a method called get, post, put, .... that all subclasses would inherit.
# but tornado internally assignes a _unimplemented and tornado can figure out if you have supplied your get/post,
# otherwise it will default to 405 for those calls
# the cleanest soln i found for app code to figure out if subclass has supplied get/post or inherited from super
# is using something like "self.post.__func__ is not tweb.RequestHandler.post"



# def options(self, *args, **kwargs):
def options(self):
    """ Allow and implement HTTP OPTIONS request on all resources on this server. """

    # this method needs to find out what is supported by its subclass for an actual resource and construct
    # a header like this that lists them:
    # self.set_header("Access-Control-Allow-Methods", "POST, GET, OPTIONS")

    allowed_methods_list = []

    #for http_method in ["get", "post", "put", "delete", "head", "options"]:

    # --- check get
    if hasattr(self, 'get') and callable(getattr(self, 'get')):
        if self.get.__func__ is not tweb.RequestHandler.get:
            allowed_methods_list.append("GET")

    # --- check post
    if hasattr(self, 'post') and callable(getattr(self, 'post')):
        if self.post.__func__ is not tweb.RequestHandler.post:
            allowed_methods_list.append("POST")

    allowed_methods = ", ".join(allowed_methods_list)

    self.set_header("Access-Control-Allow-Methods", allowed_methods)

    log.dbg(f"{self.riid}|Handling [{self.request.method} {self.request.uri}] -- Allowed: {allowed_methods}")

    # OPTIONS has no content, and usually 204 is used here for OK
    self.set_status(HTTPStatus2xx.NO_CONTENT.value)
    self.finish()
